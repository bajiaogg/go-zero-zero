// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package userrpc

import (
	"context"

	"go-zero-zero/service/user/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Address                 = pb.Address
	CreateAddressReq        = pb.CreateAddressReq
	DeleteAddressReq        = pb.DeleteAddressReq
	DeleteAddressResp       = pb.DeleteAddressResp
	GenerateTokenReq        = pb.GenerateTokenReq
	GenerateTokenResp       = pb.GenerateTokenResp
	GetAddressListReq       = pb.GetAddressListReq
	GetAddressListResp      = pb.GetAddressListResp
	GetMultipleUserInfoReq  = pb.GetMultipleUserInfoReq
	GetMultipleUserInfoResp = pb.GetMultipleUserInfoResp
	GetSingleUserInfoReq    = pb.GetSingleUserInfoReq
	GetSingleUserInfoResp   = pb.GetSingleUserInfoResp
	LoginReq                = pb.LoginReq
	LoginResp               = pb.LoginResp
	RegisterReq             = pb.RegisterReq
	RegisterResp            = pb.RegisterResp
	SaveAddressResp         = pb.SaveAddressResp
	UpdateAddressReq        = pb.UpdateAddressReq
	User                    = pb.User

	UserRpc interface {
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		UserInfo(ctx context.Context, in *GetSingleUserInfoReq, opts ...grpc.CallOption) (*GetSingleUserInfoResp, error)
		MultipleUserInfo(ctx context.Context, in *GetMultipleUserInfoReq, opts ...grpc.CallOption) (*GetMultipleUserInfoResp, error)
		GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)

		CreateAddress(ctx context.Context, in *CreateAddressReq, opts ...grpc.CallOption) (*SaveAddressResp, error)
		UpdateAddress(ctx context.Context, in *UpdateAddressReq, opts ...grpc.CallOption) (*SaveAddressResp, error)
		DeleteAddress(ctx context.Context, in *DeleteAddressReq, opts ...grpc.CallOption) (*DeleteAddressResp, error)
		AddressList(ctx context.Context, in *GetAddressListReq, opts ...grpc.CallOption) (*GetAddressListResp, error)
	}

	defaultUserRpc struct {
		cli zrpc.Client
	}
)

func NewUserRpc(cli zrpc.Client) UserRpc {
	return &defaultUserRpc{
		cli: cli,
	}
}

//  用户模块
func (m *defaultUserRpc) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := pb.NewUserRpcClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUserRpc) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUserRpcClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserRpc) UserInfo(ctx context.Context, in *GetSingleUserInfoReq, opts ...grpc.CallOption) (*GetSingleUserInfoResp, error) {
	client := pb.NewUserRpcClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}

func (m *defaultUserRpc) MultipleUserInfo(ctx context.Context, in *GetMultipleUserInfoReq, opts ...grpc.CallOption) (*GetMultipleUserInfoResp, error) {
	client := pb.NewUserRpcClient(m.cli.Conn())
	return client.MultipleUserInfo(ctx, in, opts...)
}

func (m *defaultUserRpc) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	client := pb.NewUserRpcClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}

//  地址
func (m *defaultUserRpc) CreateAddress(ctx context.Context, in *CreateAddressReq, opts ...grpc.CallOption) (*SaveAddressResp, error) {
	client := pb.NewUserRpcClient(m.cli.Conn())
	return client.CreateAddress(ctx, in, opts...)
}

func (m *defaultUserRpc) UpdateAddress(ctx context.Context, in *UpdateAddressReq, opts ...grpc.CallOption) (*SaveAddressResp, error) {
	client := pb.NewUserRpcClient(m.cli.Conn())
	return client.UpdateAddress(ctx, in, opts...)
}

func (m *defaultUserRpc) DeleteAddress(ctx context.Context, in *DeleteAddressReq, opts ...grpc.CallOption) (*DeleteAddressResp, error) {
	client := pb.NewUserRpcClient(m.cli.Conn())
	return client.DeleteAddress(ctx, in, opts...)
}

func (m *defaultUserRpc) AddressList(ctx context.Context, in *GetAddressListReq, opts ...grpc.CallOption) (*GetAddressListResp, error) {
	client := pb.NewUserRpcClient(m.cli.Conn())
	return client.AddressList(ctx, in, opts...)
}
